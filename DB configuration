This documentation will explain how to configure the sqlite database to store the user data from application.  

Sqlite is a light weight database engine.

# Install sqlite
sudo yum install sqlite

# Modify the app.py file to include database configuration

************************************************************************************************************************
from flask import Flask, request, render_template_string, g
import sqlite3

app = Flask(__name__)

def get_db():
    if 'db' not in g:
        g.db = sqlite3.connect('database.db')
        g.db.row_factory = sqlite3.Row
    return g.db

def init_db():
    with app.app_context():
        db = get_db()
        with app.open_resource('schema.sql') as f:
            db.executescript(f.read().decode('utf8'))

@app.route('/', methods=['GET', 'POST'])
def home():
    if request.method == 'POST':
        user_input = request.form['user_input']
        db = get_db()
        db.execute('INSERT INTO user_input (input) VALUES (?)', (user_input,))
        db.commit()
        return render_template_string('''
            <p>Hello, welcome to this app</p>
            <form method="post">
                <input type="text" name="user_input" />
                <input type="submit" value="OK" />
            </form>
            <h2>You entered: {{ user_input }}</h2>
        ''', user_input=user_input)
    return render_template_string('''
        <p>Hello, welcome to this app</p>
        <form method="post">
            <input type="text" name="user_input" />
            <input type="submit" value="OK" />
        </form>
    ''')

if __name__ == '__main__':
    with app.app_context():
        init_db()
    app.run(host='0.0.0.0', port=80)

************************************************************************************************************************

When the script runs, it will connect the application to the database(get_db) and then creates a tables based on schema.sql as defined in init_db.

Then, based on request if its POST then the user input will be inserted into the table as per 'insert' command.


# Create the schema.sql file
vi schema.sql 

************************************************************************************************************************
CREATE TABLE IF NOT EXISTS user_input (
    id INTEGER PRIMARY KEY,
    input TEXT NOT NULL
);
************************************************************************************************************************


# Initialize the database
You can do this in the Python shell:

************************************************************************************************************************
from app import init_db
init_db()
************************************************************************************************************************

In command line enter 'python' to get into python shell
>>>from app import init_db
>>>init_db() 


# Restart NGINX and start the application
sudo systemctl status nginx
sudo systemctl restart nginx
sudo systemctl status nginx
uwsgi --ini /home/ec2-user/app/app.ini


# Access your application
Access your application via browser and make some entry.


# Login to the database and execute few db queries
Login to DB:
sqlite3 database.db 
List all tables in the database:
.tables 
View the structure of a table:
.schema user_input
View data in tables: 
Use the SELECT * FROM user_input; 
Exit the SQLite command-line: 
.quit command or press Ctrl+D to 

